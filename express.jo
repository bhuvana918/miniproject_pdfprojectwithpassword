const express = require('express');
const multer = require('multer');
const { PDFDocument, StandardFonts } = require('pdf-lib');
const fs = require('fs');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

// Multer configuration for file upload
const upload = multer({ dest: 'uploads/' });

// Body parser middleware
app.use(bodyParser.urlencoded({ extended: true }));

// Serve static files from the public directory
app.use(express.static('public'));

// Route for file upload
app.post('/upload', upload.single('pdfFile'), async (req, res) => {
    try {
        const { path: pdfPath, originalname: fileName } = req.file;
        const { password } = req.body;

        // Read uploaded PDF file
        const pdfBytes = fs.readFileSync(pdfPath);

        // Load PDF
        const pdfDoc = await PDFDocument.load(pdfBytes);

        // Encrypt PDF with password
        const securityOptions = {
            userPassword: password,
            ownerPassword: password,
            permissions: {
                print: true,
                copyContent: true,
                modifyAnnotations: true,
                modifyContents: true,
                fillInteractiveForms: true,
                extractContents: true,
                assembleDocument: true,
                printHighQuality: true,
            },
        };
        pdfDoc.encrypt(securityOptions);

        // Write encrypted PDF to a new file
        const encryptedPdfPath = `uploads/protected_${fileName}`;
        const encryptedPdfBytes = await pdfDoc.save();
        fs.writeFileSync(encryptedPdfPath, encryptedPdfBytes);

        // Send back response with link to download protected PDF
        res.send(`<a href="${encryptedPdfPath}" download>Download Protected PDF</a>`);
    } catch (error) {
        console.error('Error protecting PDF:', error);
        res.status(500).send('Error protecting PDF. Please try again.');
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
